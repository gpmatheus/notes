// Mocks generated by Mockito 5.4.4 from annotations
// in notes/test/data/repository/note_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:notes/data/services/interfaces/model/note/note_dto.dart' as _i2;
import 'package:notes/data/services/interfaces/note_service.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNoteDto_0 extends _i1.SmartFake implements _i2.NoteDto {
  _FakeNoteDto_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NoteService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNoteService extends _i1.Mock implements _i3.NoteService {
  MockNoteService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.NoteDto> getNoteById(String? contentId) => (super.noSuchMethod(
        Invocation.method(
          #getNoteById,
          [contentId],
        ),
        returnValue: _i4.Future<_i2.NoteDto>.value(_FakeNoteDto_0(
          this,
          Invocation.method(
            #getNoteById,
            [contentId],
          ),
        )),
      ) as _i4.Future<_i2.NoteDto>);

  @override
  _i4.Future<List<_i2.NoteDto>> getNotes() => (super.noSuchMethod(
        Invocation.method(
          #getNotes,
          [],
        ),
        returnValue: _i4.Future<List<_i2.NoteDto>>.value(<_i2.NoteDto>[]),
      ) as _i4.Future<List<_i2.NoteDto>>);

  @override
  _i4.Future<_i2.NoteDto> createNote(_i2.NoteDto? noteDto) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNote,
          [noteDto],
        ),
        returnValue: _i4.Future<_i2.NoteDto>.value(_FakeNoteDto_0(
          this,
          Invocation.method(
            #createNote,
            [noteDto],
          ),
        )),
      ) as _i4.Future<_i2.NoteDto>);

  @override
  _i4.Future<_i2.NoteDto> updateNote(
    String? id,
    _i2.NoteDto? noteDto,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateNote,
          [
            id,
            noteDto,
          ],
        ),
        returnValue: _i4.Future<_i2.NoteDto>.value(_FakeNoteDto_0(
          this,
          Invocation.method(
            #updateNote,
            [
              id,
              noteDto,
            ],
          ),
        )),
      ) as _i4.Future<_i2.NoteDto>);

  @override
  _i4.Future<void> deleteNote(String? noteId) => (super.noSuchMethod(
        Invocation.method(
          #deleteNote,
          [noteId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
