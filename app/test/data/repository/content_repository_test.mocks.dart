// Mocks generated by Mockito 5.4.4 from annotations
// in notes/test/data/repository/content_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:notes/data/services/interfaces/content_service.dart' as _i3;
import 'package:notes/data/services/interfaces/model/content/content_dto.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeContentDto_0 extends _i1.SmartFake implements _i2.ContentDto {
  _FakeContentDto_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ContentService].
///
/// See the documentation for Mockito's code generation for more information.
class MockContentService extends _i1.Mock implements _i3.ContentService {
  MockContentService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.ContentDto>> getContents(String? noteId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getContents,
          [noteId],
        ),
        returnValue: _i4.Future<List<_i2.ContentDto>>.value(<_i2.ContentDto>[]),
      ) as _i4.Future<List<_i2.ContentDto>>);

  @override
  _i4.Future<_i2.ContentDto> getContentById(
    String? noteId,
    String? contentId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getContentById,
          [
            noteId,
            contentId,
          ],
        ),
        returnValue: _i4.Future<_i2.ContentDto>.value(_FakeContentDto_0(
          this,
          Invocation.method(
            #getContentById,
            [
              noteId,
              contentId,
            ],
          ),
        )),
      ) as _i4.Future<_i2.ContentDto>);

  @override
  _i4.Future<_i2.ContentDto> updateContent(
    String? noteId,
    String? contentId,
    _i2.ContentDto? contentDto,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateContent,
          [
            noteId,
            contentId,
            contentDto,
          ],
        ),
        returnValue: _i4.Future<_i2.ContentDto>.value(_FakeContentDto_0(
          this,
          Invocation.method(
            #updateContent,
            [
              noteId,
              contentId,
              contentDto,
            ],
          ),
        )),
      ) as _i4.Future<_i2.ContentDto>);

  @override
  _i4.Future<int> getContentsCount(String? noteId) => (super.noSuchMethod(
        Invocation.method(
          #getContentsCount,
          [noteId],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<void> switchPositions(
    String? noteId,
    String? firstContentId,
    String? secondContentId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #switchPositions,
          [
            noteId,
            firstContentId,
            secondContentId,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
